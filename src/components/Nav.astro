---
import Icon from './Icon.astro';
import type { iconPaths } from './IconPaths';

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
	{ label: 'Home', href: '/#home' },
	{ label: 'About', href: '/#about' },
	{ label: 'Features', href: '/#work' },
	{ label: 'Blog', href: '/blog' },
	{ label: 'Docs', href: '/documentation' },
	{ label: 'Contact', href: '/#contact' },
];

/** Icon links to social media â€” edit these with links to your profiles! */
const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
	{ label: 'GitHub', href: 'https://github.com/luigids03/PizzaWorld/', icon: 'github-logo' },
	{ label: 'Email', href: 'mailto:pizzaworldplus@gmail.com', icon: 'mail' },
];

/** Test if a link is pointing to the current page or section. */
const isCurrentPage = (href: string) => {
	// For anchor links and route-based navigation, we'll handle active states with JavaScript
	if (href.startsWith('#') || href.startsWith('/#')) return false;
	
	let pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
	if (pathname.at(0) !== '/') pathname = '/' + pathname;
	if (pathname.at(-1) === '/' && pathname !== '/') pathname = pathname.slice(0, -1);
	
	return pathname === href;
};
---

<nav>
	<div class="menu-header">
		<a href="/" class="site-title" style="gap: 0.2rem;">
			<img src="/assets/logo.png" alt="PizzaWorld+ Logo" class="site-logo" />
			<span>PizzaWorld<span style="color: var(--accent-regular);">+</span></span>
		</a>
		<div class="nav-actions">
			<menu-button>
				<template>
					<button class="menu-button" aria-expanded="false">
						<span class="sr-only">Menu</span>
						<Icon icon="list" />
					</button>
				</template>
			</menu-button>
		</div>
	</div>
	<noscript>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a aria-current={isCurrentPage(href) ? 'page' : null} class="link" href={href}>
							{label}
						</a>
					</li>
				))
			}
		</ul>
	</noscript>
	<noscript>
		<div class="menu-footer">
			<div class="socials">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>
			<button class="theme-toggle-btn" data-theme-toggle>
				<span class="sr-only">Toggle theme</span>
				<span class="sun-icon"><Icon icon="sun" /></span>
				<span class="moon-icon"><Icon icon="moon-stars" /></span>
			</button>
		</div>
	</noscript>
	<div id="menu-content" hidden>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a aria-current={isCurrentPage(href) ? 'page' : null} class="link" href={href}>
							{label}
						</a>
					</li>
				))
			}
		</ul>
		<div class="menu-footer">
			<div class="socials">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>
			<button class="theme-toggle-btn" data-theme-toggle>
				<span class="sr-only">Toggle theme</span>
				<span class="sun-icon"><Icon icon="sun" /></span>
				<span class="moon-icon"><Icon icon="moon-stars" /></span>
			</button>
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById('menu-content')!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add('menu-content');

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
	customElements.define('menu-button', MenuButton);

	// Theme toggle functionality
	document.addEventListener('DOMContentLoaded', () => {
		const themeToggleButtons = document.querySelectorAll('[data-theme-toggle]');
		
		const setTheme = (isDark: boolean) => {
			document.documentElement.classList.toggle('theme-dark', isDark);
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
			
			// Update all theme toggle buttons
			themeToggleButtons.forEach(btn => {
				btn.setAttribute('aria-pressed', String(isDark));
			});
		};

		// Initialize theme from localStorage or system preference
		const savedTheme = localStorage.getItem('theme');
		const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
		const isDark = savedTheme ? savedTheme === 'dark' : systemDark;
		setTheme(isDark);

		// Add click event to all theme toggle buttons
		themeToggleButtons.forEach(btn => {
			btn.addEventListener('click', () => {
				const currentDark = document.documentElement.classList.contains('theme-dark');
				setTheme(!currentDark);
			});
		});
	});

	// Smooth scrolling for anchor links and active state management
	document.addEventListener('DOMContentLoaded', () => {
		const anchorLinks = document.querySelectorAll('nav a[href^="#"], nav a[href^="/#"]');
		const allNavLinks = document.querySelectorAll('nav a[href]');
		
		// Function to set active link
		const setActiveLink = (activeHref: string) => {
			allNavLinks.forEach(link => {
				const href = link.getAttribute('href');
				// Handle both #section and /#section formats
				const normalizedHref = href?.startsWith('/') ? href.substring(1) : href;
				const normalizedActiveHref = activeHref?.startsWith('/') ? activeHref.substring(1) : activeHref;
				
				if (normalizedHref === normalizedActiveHref || href === activeHref) {
					link.setAttribute('aria-current', 'page');
					link.classList.add('active');
				} else {
					link.removeAttribute('aria-current');
					link.classList.remove('active');
				}
			});
		};

		// Set initial active state based on current page
		const setInitialActiveState = () => {
			const currentPath = window.location.pathname;
			
			// Clear all active states first
			allNavLinks.forEach(link => {
				link.removeAttribute('aria-current');
				link.classList.remove('active');
			});
			
			// Set active state based on current page
			if (currentPath === '/blog') {
				const blogLink = document.querySelector('nav a[href="/blog"]');
				if (blogLink) {
					blogLink.setAttribute('aria-current', 'page');
					blogLink.classList.add('active');
				}
			} else if (currentPath === '/documentation') {
				const docsLink = document.querySelector('nav a[href="/documentation"]');
				if (docsLink) {
					docsLink.setAttribute('aria-current', 'page');
					docsLink.classList.add('active');
				}
			} else {
				// For home page, set Home as active
				const homeLink = document.querySelector('nav a[href="/#home"]');
				if (homeLink) {
					homeLink.setAttribute('aria-current', 'page');
					homeLink.classList.add('active');
				}
			}
		};

		// Set initial state
		setInitialActiveState();

		// Set initial active state based on current section (only on home page)
		const updateActiveSection = () => {
			// Only run section detection on home page
			if (window.location.pathname !== '/' && window.location.pathname !== '') {
				return;
			}
			
			const sections = document.querySelectorAll('section[id], div[id]');
			let currentSection = '#home';
			
			sections.forEach(section => {
				const rect = section.getBoundingClientRect();
				if (rect.top <= 100 && rect.bottom >= 100) {
					currentSection = '#' + section.id;
				}
			});
			
			setActiveLink(currentSection);
		};

		// Update active section on scroll (only on home page)
		if (window.location.pathname === '/' || window.location.pathname === '') {
			window.addEventListener('scroll', updateActiveSection);
			updateActiveSection(); // Set initial state for home page
		}
		
		// Handle anchor links (smooth scrolling)
		anchorLinks.forEach(link => {
			link.addEventListener('click', (e) => {
				const href = link.getAttribute('href');
				if (href && href !== '#') {
					// Check if it's a same-page anchor link
					if (href.startsWith('#')) {
						e.preventDefault();
						// Set active state immediately
						setActiveLink(href);
						
						const target = document.querySelector(href);
						if (target) {
							target.scrollIntoView({
								behavior: 'smooth',
								block: 'start'
							});
							
							// Close mobile menu if open
							const menu = document.getElementById('menu-content');
							const button = document.querySelector('.menu-button') as HTMLButtonElement;
							if (menu && button) {
								menu.hidden = true;
								button.setAttribute('aria-expanded', 'false');
							}
						}
					}
					// For /#section links, let the browser handle navigation to home page
					else if (href.startsWith('/#')) {
						// Just close the mobile menu, let the browser navigate
						const menu = document.getElementById('menu-content');
						const button = document.querySelector('.menu-button') as HTMLButtonElement;
						if (menu && button) {
							menu.hidden = true;
							button.setAttribute('aria-expanded', 'false');
						}
					}
				}
			});
		});
		
		// Handle route links (close mobile menu on click)
		allNavLinks.forEach(link => {
			if (!link.getAttribute('href')?.startsWith('#')) {
				link.addEventListener('click', () => {
					// Close mobile menu if open
					const menu = document.getElementById('menu-content');
					const button = document.querySelector('.menu-button') as HTMLButtonElement;
					if (menu && button) {
						menu.hidden = true;
						button.setAttribute('aria-expanded', 'false');
					}
				});
			}
		});
	});
</script>

<style>
	nav {
		z-index: 9999;
		position: relative;
		font-family: var(--font-brand);
		font-weight: 500;
		margin-bottom: 1.5rem;
	}

	.menu-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		gap: 0.5rem;
		padding: 1rem 1.5rem;
	}

	.site-title {
		display: flex;
		gap: 0.5rem;
		align-items: center;
		line-height: 1.1;
		color: var(--gray-0);
		text-decoration: none;
		font-weight: 700;
	}

	.site-logo {
		width: 4rem;
		height: 4rem;
		background: transparent;
		border-radius: 0;
		box-shadow: none;
		object-fit: contain;
		margin-right: 0.2rem;
		transition: transform 0.3s ease, box-shadow 0.3s ease;
	}

	.site-logo:hover {
		transform: scale(1.1);
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
	}

	.nav-actions {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.theme-toggle-desktop {
		display: none;
	}

	.socials-top {
		display: flex;
		gap: 0.5rem;
		align-items: center;
	}

	.social-top {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 2rem;
		height: 2rem;
		border-radius: 0.5rem;
		background: var(--gray-800);
		color: var(--gray-300);
		text-decoration: none;
		transition: all 0.2s ease;
		border: 1px solid var(--gray-700);
	}

	.social-top:hover {
		background: var(--accent-regular);
		color: var(--gray-0);
		transform: translateY(-2px);
	}

	.menu-button {
		position: relative;
		display: flex;
		border: 0;
		border-radius: 999rem;
		padding: 0.5rem;
		font-size: 1.5rem;
		color: var(--gray-300);
		background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
		box-shadow: var(--shadow-md);
	}

	.menu-button[aria-expanded='true'] {
		color: var(--gray-0);
		background:
			linear-gradient(180deg, var(--gray-600), transparent),
			radial-gradient(var(--gray-900), var(--gray-800) 150%);
	}

	.menu-button[hidden] {
		display: none;
	}

	.menu-button::before {
		position: absolute;
		inset: -1px;
		content: '';
		background: var(--gradient-stroke);
		border-radius: 999rem;
		z-index: -1;
	}

	.menu-content {
		position: absolute;
		left: 0;
		right: 0;
	}

	.nav-items {
		margin: 0;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		font-size: var(--text-md);
		line-height: 1.2;
		list-style: none;
		padding: 2rem;
		background-color: var(--gray-999);
		border-bottom: 1px solid var(--gray-800);
	}

	.link {
		display: inline-block;
		color: var(--gray-300);
		text-decoration: none;
	}

	.link[aria-current],
	.link.active {
		color: var(--gray-0);
		background-color: var(--gray-800);
		border-radius: 1rem;
		padding: 0.5rem 1rem;
	}

	.menu-footer {
		--icon-size: 2rem;
		--icon-padding: 0.5rem;

		display: flex;
		justify-content: space-between;
		align-items: center;
		gap: 0.75rem;
		padding: 1.25rem 0.75rem 1.25rem 1.5rem;
		background-color: var(--gray-999);
		border-radius: 0 0 0.75rem 0.75rem;
		box-shadow: var(--shadow-lg);
	}

	.socials {
		display: flex;
		flex-wrap: wrap;
		gap: 0.625rem;
		font-size: var(--icon-size);
	}

	.social {
		display: flex;
		padding: var(--icon-padding);
		text-decoration: none;
		color: var(--accent-dark);
		transition: color var(--theme-transition);
	}

	.social:hover,
	.social:focus {
		color: var(--accent-text-over);
	}

	.theme-toggle-btn {
		display: flex;
		align-items: center;
		border: 0;
		border-radius: 999rem;
		padding: 0.125rem;
		background: linear-gradient(145deg, var(--gray-800), var(--gray-900));
		box-shadow: 
			inset 0 1px 0 rgba(255, 255, 255, 0.1),
			0 2px 8px rgba(0, 0, 0, 0.3);
		cursor: pointer;
		position: relative;
		width: 4rem;
		height: 2rem;
		transition: all 0.3s ease;
		overflow: hidden;
		margin-left: auto;
		margin-right: 0;
	}

	.theme-toggle-btn:hover {
		transform: translateY(-1px);
		box-shadow: 
			inset 0 1px 0 rgba(255, 255, 255, 0.15),
			0 4px 12px rgba(0, 0, 0, 0.4);
	}

	.theme-toggle-btn .sun-icon,
	.theme-toggle-btn .moon-icon {
		position: relative;
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 0;
		width: 1.75rem;
		height: 1.75rem;
		font-size: 0.875rem;
		color: var(--gray-400);
		z-index: 2;
		transition: all 0.3s ease;
	}

	.theme-toggle-btn .sun-icon::before {
		content: '';
		position: absolute;
		inset: 0;
		background: linear-gradient(145deg, var(--accent-regular), var(--accent-dark));
		border-radius: 999rem;
		z-index: -1;
		transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
	}

	.theme-toggle-btn[aria-pressed='true'] .sun-icon::before {
		transform: translateX(100%);
	}

	.theme-toggle-btn[aria-pressed='true'] .moon-icon {
		color: var(--gray-0);
		text-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
	}

	.theme-toggle-btn[aria-pressed='false'] .sun-icon {
		color: var(--gray-0);
		text-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
	}

	.theme-toggle-btn[aria-pressed='false'] .moon-icon {
		color: var(--gray-500);
	}

	@media (min-width: 50em) {
		nav {
			display: grid;
			grid-template-columns: 1fr auto 1fr;
			align-items: center;
			padding: 2.5rem 5rem;
			gap: 1rem;
		}

		.menu-header {
			padding: 0;
		}

		.site-title {
			font-size: var(--text-lg);
		}

		.menu-content {
			display: contents;
		}

		.nav-items {
			position: relative;
			flex-direction: row;
			font-size: var(--text-sm);
			border-radius: 999rem;
			border: 0;
			padding: 0.5rem 0.5625rem;
			background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
			box-shadow: var(--shadow-md);
		}

		.nav-items::before {
			position: absolute;
			inset: -1px;
			content: '';
			background: var(--gradient-stroke);
			border-radius: 999rem;
			z-index: -1;
		}

		.link {
			padding: 0.5rem 1rem;
			border-radius: 999rem;
			transition:
				color var(--theme-transition),
				background-color var(--theme-transition);
		}

		.link:hover,
		.link:focus {
			color: var(--gray-100);
			background-color: var(--accent-subtle-overlay);
		}

		.link[aria-current='page'],
		.link.active {
			color: var(--accent-text-over);
			background-color: var(--accent-regular);
		}

		.menu-footer {
			--icon-padding: 0.375rem;

			justify-self: flex-end;
			align-items: center;
			padding: 0;
			background-color: transparent;
			box-shadow: none;
		}

		.socials {
			display: none;
		}

		.socials-top {
			display: flex;
		}

		.theme-toggle-desktop {
			display: flex;
		}
	}

	@media (min-width: 60em) {
		.socials {
			display: flex;
			justify-content: flex-end;
			gap: 0;
		}
	}
	@media (forced-colors: active) {
		.link[aria-current='page'],
		.link.active {
			color: SelectedItem;
		}
	}
</style>
