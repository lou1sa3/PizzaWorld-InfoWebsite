# .github/workflows/deploy-astro.yml
name: Deploy Astro site to Pages

on:
  push:
    branches: [main]        # rebuild on every push to main
  workflow_dispatch:        # allow manual trigger from Actions tab

# 1️⃣  Minimum token scopes for Pages-style deploys
permissions:
  contents: read            # checkout source
  pages: write              # upload + publish to Pages
  id-token: write           # OIDC auth for the deploy step

# 2️⃣  One Pages deploy at a time
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "."           # change if your Astro project sits in a sub-folder

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # --- (optional) auto-detect npm vs yarn vs pnpm -------------
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [[ -f yarn.lock ]];       then echo "manager=yarn";  echo "command=install"; echo "runner=yarn";
          elif [[ -f pnpm-lock.yaml ]]; then echo "manager=pnpm"; echo "command=install"; echo "runner=pnpm";
          else                           echo "manager=npm";   echo "command=ci";      echo "runner=npx --no-install";
          fi >> "$GITHUB_OUTPUT"

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      # 3️⃣  Tell Pages what the final URL will be (origin + base-path)
      - id: pages
        uses: actions/configure-pages@v5      :contentReference[oaicite:0]{index=0}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}

      # 4️⃣  Package ./dist as an artifact that Pages can pick up
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}   # <- populated below

    steps:
      # 5️⃣  Publish the artifact to the gh-pages environment
      - id: deployment
        uses: actions/deploy-pages@v4                :contentReference[oaicite:1]{index=1}
